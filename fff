= MidPoint Deployment and Configuration Guide
:toc:

This document provides a step-by-step guide for configuring MidPoint to manage users from a source LDAP directory and provision them to a target OpenLDAP directory.

== 1. Source Resource Configuration (AD-Source)

This section covers the setup of the source LDAP resource from which MidPoint will import user data.

=== 1.1. Create LDAP Resource
First, create a new resource from the LDAP template.
. Navigate to *Resources > New > From scratch > LDAP template*.
. In the *Basic* section, set the *Name* to `AD-Source`.
. Under *Resource configuration*, provide the connection details:
+
[cols="1,3"]
|===
| Host | `10.3.11.31`
| Port | `1389`
| DN | `uid=keycloakadmin,ou=users,ou=admin,dc=ravago,dc=com`
| Password | `DkFnV4iXpKw7F4oufAtwoiMFGbg5aVc3nf9P`
|===

=== 1.2. Configure Synchronization
Define how MidPoint reacts to objects found in the source.
. Navigate to *Accounts > Configure > Synchronization*.
. Add the following rules:
+
[cols="1,1,1"]
|===
| Situation | Action | Lifecycle
| Unmatched | Add focus | Active
| Linked | Synchronize | Active
|===

=== 1.3. Configure Mappings
Map attributes from the source resource to MidPoint's internal model.
. Navigate to *Accounts > Configure > Mappings*.
. Add the following inbound mappings:
+
[cols="2,2,1,2,1"]
|===
| Name | From resource attribute | Expression | Target | Lifecycle state
| uid-to-name | `uid` | As is | `name` | Active
| entryUUID-to-personalNumber | `entryUUID` | As is | `personalNumber` | Active
| givenName-to-givenName | `givenName` | As is | `givenName` | Active
| description-to-description | `Description` | As is | `description` | Active
| sn-to-familyName | `sn` | As is | `familyName` | Active
| ravagoohmuid-to-title | `ravagoohmuid` | As is | `title` | Active
| ravagoauthzmatrix | `ravagoauthzmatrix` | As is | |
|===
. Save the mappings.

=== 1.4. Adjust Resource Capabilities
Restrict the operations MidPoint can perform on the source.
. Navigate to the *Details* tab of the resource.
. Uncheck the *Create* and *Delete* capabilities.
. Set the *Update* capability to `Enabled: False`.
. Click *OK*, then *Save*.

=== 1.5. Test Import
Verify the configuration by running a simulated import.
. Go to *Accounts* and select *Import preview* from the dropdown next to an account.
. The simulation should show the user being added to MidPoint.
+
.Example Simulation Result:
image::processed-objects.png[]
+
The image shows a successful user import simulation for "Ana Lopez," detailing the attributes being added and assigning the `Person` archetype.

=== 1.6. Finalize and Activate
Prepare the resource for live operation.
. Navigate to *Object templates > All object templates > Person Object Template > Mappings*.
. Ensure `generate-fullname` is `Draft (disabled)`.
. Change the resource's *Lifecycle state* to `Active`.
. Create a one-time *Import Task* via *Tasks > Create Task* to pull in all users. Ensure *Simulation task* is `OFF`. Configure the task to use the `AD-Source` resource and then *Save & Run*.

== 2. Target Resource Deployment (OpenLDAP via Docker)

This section details how to deploy an OpenLDAP instance using Docker to serve as the target system.

=== 2.1. Docker Compose Setup
. Create a file named `docker-compose.yml`.
. Paste the following content into the file:
+
[source,yaml]
----
version: '3.7'
services:
  openldap:
    image: osixia/openldap:latest
    container_name: openldap
    ports:
      - "389:389"
      - "636:636"
    environment:
      LDAP_ORGANISATION: example
      LDAP_DOMAIN: example.com
      LDAP_ADMIN_PASSWORD: Midpoint001
      LDAP_BASE_DN: "dc=example,dc=com"
    # Add other environment variables and volumes as needed
    networks:
      - openldap
  phpldapadmin:
    image: osixia/phpldapadmin:latest
    container_name: phpldapadmin
    ports:
      - "80:80"
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: openldap
    depends_on:
      - openldap
    networks:
      - openldap
networks:
  openldap:
    driver: bridge
----

=== 2.2. Deployment Command
. Open a terminal in the folder containing the `docker-compose.yml` file.
. Run the container deployment command:
+
[source,bash]
----
docker compose up -d
----

== 3. Target Resource Configuration (AD-Target)

This section describes how to configure the target OpenLDAP resource in MidPoint.

=== 3.1. Create LDAP Connector Resource
. Navigate to *Resources > New resource > From Scratch > LdapConnector*.
. *Basic information*: Name the resource `AD-Target` and set its state to `Proposed (simulation)`.
. *Configuration*: Enter the connection details for your Dockerized OpenLDAP instance (e.g., Host: `192.168.0.235`, Port: `1389`, Bind DN: `cn=admin,dc=example2,dc=com`, Password: `Midpoint001`).
. *Discovered options*: Set Base context to `dc=example,dc=com`.
. *Configure object types*: Add an `Account` object type for `inetOrgPerson`.
. Save the resource.

=== 3.2. Configure Synchronization
. Navigate to *Accounts > Configure > Synchronization*.
. Set up rules for `Unlinked`, `Linked`, `Deleted`, and `Unmatched` situations, all with a `Proposed` lifecycle state. This ensures accounts in MidPoint and the target are kept in sync.

=== 3.3. Configure Correlation
. Navigate to *Accounts > Configure > Correlation*.
. Add a primary correlation rule based on `personalNumber` with an `Exact match`.
. Add a `last-resort-correlation` rule based on `givenName` and `familyName`, but leave it disabled initially.

=== 3.4. Configure Inbound Mappings (for Correlation)
. Navigate to *Accounts > Configure > Mappings*.
. Add inbound mappings for `sn` -> `familyName`, `givenName` -> `givenName`, and `employeeNumber` -> `personalNumber`. These are necessary for the correlation rules to function. Mark them for `Correlation` use.

== 4. Reconciliation and Synchronization

This section covers the tasks required to align data between MidPoint and the target resource.

=== 4.1. Create Reconciliation Tasks
. Create a `Reconciliation with AD - development simulation` task in `Preview` mode for `Development`.
. After review, switch the target resource and its configurations to the *Active* state.
. Create a `Reconciliation with AD - production simulation` task.
. Finally, create and run a `Reconciliation with AD - real` task with simulation turned `OFF`.

=== 4.2. Handling Orphaned Accounts
. In the target resource's synchronization settings, set the `Unmatched - Delete resource object` rule to *Active*.
. Run the production simulation task to preview deletions, then run the real task to remove orphaned accounts from the target.

=== 4.3. Handling Disputed Accounts
. After enabling the `last-resort-correlation` rule, run the real reconciliation task. Accounts may enter a `DISPUTED` state.
. Create a synchronization reaction: For the `Disputed` situation, `Create correlation case`.
. Run reconciliation again. Resolve cases manually under *Cases > My work items*.

== 5. Provisioning and Automation

This final section covers enabling outbound provisioning and automating user lifecycle processes.

=== 5.1. Enable Provisioning (Outbound Mappings)
. Navigate to *Target resource > Accounts > Configure > Mappings > Outbound mappings*.
. Add mappings to provision attributes from MidPoint to the target resource. Key mappings include `familyName` to `sn`, `name` to `uid`, and scripted mappings for `dn` and `cn`. Set their state to `Proposed`.

=== 5.2. Configure Activation
. Navigate to *Target resource > Accounts > Configure > Activation > Outbound*.
. Add rules to manage account status (enable/disable), implement a delayed delete, and disable accounts instead of deleting them. Set their state to `Proposed`.

=== 5.3. Configure Capabilities
. Navigate to *Target resource > Accounts > Configure > Capabilities > Activation status*.
. Specify the LDAP attribute that controls the account status (e.g., `ri:roomNumber`) and its value when disabled (e.g., `Disabled`).

=== 5.4. Configure Credentials
. Navigate to *Target resource > Accounts > Configure > Credentials > Outbound*.
. Add a rule to `Generate` an initial password and another to push password changes (`As is`). Set their state to `Proposed`.

=== 5.5. Activate Provisioning Configuration
. After simulating and verifying the proposed changes, activate them by changing the lifecycle state of the outbound *Mappings*, *Activation*, and *Credentials* configurations from `Proposed` to `Active`.
. Run the reconciliation tasks again to apply the changes.

=== 5.6. Generate Usernames in midPoint
. In the *Person Object Template*, activate the `generate-name-jsmith-8-2` mapping.
. Archive any previous username mappings on the source and target resources to ensure MidPoint is the authority for usernames.

=== 5.7. Create Scheduled Reconciliation Task
. On the *Source resource*, create a recurring `Reconciliation Task` to run at a set interval (e.g., `60` seconds/minutes) to keep MidPoint updated with changes from the source.

=== 5.8. Automate Account Creation via Inducements
. Navigate to *Archetypes > All archetypes > Person*.
. Add an *Inducement* that automatically assigns the target resource to any user with the Person archetype. This will trigger the provisioning process for all new users.
